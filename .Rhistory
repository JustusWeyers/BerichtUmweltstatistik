drop_na(predictions) |>
# ggplot
ggplot(aes(x = Bodenfeuchte_Prozent, y = predictions, colour = Modeltype)) +
geom_line(aes(color = Modeltype)) + theme_bw()+
labs(x = "Messwerte", y = "Vorersage", color = "Modelltyp")+
scale_fill_discrete(labels=c("Bestes lineares Modell", "RF-INB", "Einfaches lineares Modell", "RF-OOB", "CART"))
data |>
# Dataframe umgestalten. Spalte mit modelltyp hinzufügen.
pivot_longer(cols=c("linModel", "bestlinModel", "treeModel", "OOB", "INB"),
names_to='Modeltype', values_to='predictions') |>
# Entfernen von Zeilen mit NAs in der Error-Spalte
drop_na(predictions) |>
# ggplot
ggplot(aes(x = Bodenfeuchte_Prozent, y = predictions, colour = Modeltype)) +
geom_line(aes(color = Modeltype)) + theme_bw()+
labs(x = "Messwerte", y = "Vorhersage", color = "Modelltyp") +
scale_fill_discrete(labels=c("Bestes lineares Modell", "RF-INB", "Einfaches lineares Modell", "RF-OOB", "CART"))
data |>
# Dataframe umgestalten. Spalte mit modelltyp hinzufügen.
pivot_longer(cols=c("linModel", "bestlinModel", "treeModel", "OOB", "INB"),
names_to='Modeltype', values_to='predictions') |>
# Entfernen von Zeilen mit NAs in der Error-Spalte
drop_na(predictions) |>
# ggplot
ggplot(aes(x = Bodenfeuchte_Prozent, y = predictions, colour = Modeltype)) +
geom_line(aes(color = Modeltype)) + theme_bw()+
labs(x = "Messwerte", y = "Vorhersage", color = "Modelltyp") +
scale_color_manual(labels=c("Bestes lineares Modell", "RF-INB", "Einfaches lineares Modell", "RF-OOB", "CART"))
data |>
# Dataframe umgestalten. Spalte mit modelltyp hinzufügen.
pivot_longer(cols=c("linModel", "bestlinModel", "treeModel", "OOB", "INB"),
names_to='Modeltype', values_to='predictions') |>
# Entfernen von Zeilen mit NAs in der Error-Spalte
drop_na(predictions) |>
# ggplot
ggplot(aes(x = Bodenfeuchte_Prozent, y = predictions, colour = Modeltype)) +
geom_line(aes(color = Modeltype)) + theme_bw()+
labs(x = "Messwerte", y = "Vorhersage", color = "Modelltyp") +
scale_fill_discrete(labels=c("Bestes lineares Modell", "RF-INB", "Einfaches lineares Modell", "RF-OOB", "CART"))
data |>
# Dataframe umgestalten. Spalte mit modelltyp hinzufügen.
pivot_longer(cols=c("linModel", "bestlinModel", "treeModel", "OOB", "INB"),
names_to='Modeltype', values_to='predictions') |>
# Entfernen von Zeilen mit NAs in der Error-Spalte
drop_na(predictions) |>
# ggplot
ggplot(aes(x = Bodenfeuchte_Prozent, y = predictions, colour = Modeltype)) +
geom_line(aes(color = Modeltype)) + theme_bw()+
labs(x = "Messwerte", y = "Vorhersage", color = "Modelltyp") +
scale_fill_discrete(labels=c("Bestes lineares Modell", "RF-INB", "Einfaches lineares Modell", "RF-OOB", "CART"), breaks = c("bestlinModel", "INB", "linModel", "OOB", "treeModel"))
data |>
# Dataframe umgestalten. Spalte mit modelltyp hinzufügen.
pivot_longer(cols=c("linModel", "bestlinModel", "treeModel", "OOB", "INB"),
names_to='Modeltype', values_to='predictions') |>
# Entfernen von Zeilen mit NAs in der Error-Spalte
drop_na(predictions) |>
# ggplot
ggplot(aes(x = Bodenfeuchte_Prozent, y = predictions, colour = Modeltype)) +
geom_line(aes(color = Modeltype)) + theme_bw()+
labs(x = "Messwerte", y = "Vorhersage", color = "Modelltyp") +
scale_fill_discrete(breaks = c("bestlinModel", "INB", "linModel", "OOB", "treeModel"), labels=c("Bestes lineares Modell", "RF-INB", "Einfaches lineares Modell", "RF-OOB", "CART"))
data |>
# Dataframe umgestalten. Spalte mit modelltyp hinzufügen.
pivot_longer(cols=c("linModel", "bestlinModel", "treeModel", "OOB", "INB"),
names_to='Modeltype', values_to='predictions') |>
# Entfernen von Zeilen mit NAs in der Error-Spalte
drop_na(predictions) |>
# ggplot
ggplot(aes(x = Bodenfeuchte_Prozent, y = predictions, colour = Modeltype)) +
geom_line(aes(color = Modeltype)) + theme_bw()+
labs(x = "Messwerte", y = "Vorhersage") +
scale_fill_discrete(names = "Modelltyp", breaks = c("bestlinModel", "INB", "linModel", "OOB", "treeModel"), labels=c("Bestes lineares Modell", "RF-INB", "Einfaches lineares Modell", "RF-OOB", "CART"))
data |>
# Dataframe umgestalten. Spalte mit modelltyp hinzufügen.
pivot_longer(cols=c("linModel", "bestlinModel", "treeModel", "OOB", "INB"),
names_to='Modeltype', values_to='predictions') |>
# Entfernen von Zeilen mit NAs in der Error-Spalte
drop_na(predictions) |>
# ggplot
ggplot(aes(x = Bodenfeuchte_Prozent, y = predictions, colour = Modeltype)) +
geom_line(aes(color = Modeltype)) + theme_bw()+
labs(x = "Messwerte", y = "Vorhersage") +
scale_fill_discrete(name = "Modelltyp", breaks = c("bestlinModel", "INB", "linModel", "OOB", "treeModel"), labels=c("Bestes lineares Modell", "RF-INB", "Einfaches lineares Modell", "RF-OOB", "CART"))
data |>
# Dataframe umgestalten. Spalte mit modelltyp hinzufügen.
pivot_longer(cols=c("linModel", "bestlinModel", "treeModel", "OOB", "INB"),
names_to='Modeltype', values_to='predictions') |>
# Entfernen von Zeilen mit NAs in der Error-Spalte
drop_na(predictions) |>
# ggplot
ggplot(aes(x = Bodenfeuchte_Prozent, y = predictions, colour = Modeltype)) +
geom_line(aes(color = Modeltype)) + theme_bw()+
labs(x = "Messwerte", y = "Vorhersage") +
scale_shape_discrete(name = "Modelltyp", breaks = c("bestlinModel", "INB", "linModel", "OOB", "treeModel"), labels=c("Bestes lineares Modell", "RF-INB", "Einfaches lineares Modell", "RF-OOB", "CART"))
data |>
# Dataframe umgestalten. Spalte mit modelltyp hinzufügen.
pivot_longer(cols=c("linModel", "bestlinModel", "treeModel", "OOB", "INB"),
names_to='Modeltype', values_to='predictions') |>
# Entfernen von Zeilen mit NAs in der Error-Spalte
drop_na(predictions) |>
# ggplot
ggplot(aes(x = Bodenfeuchte_Prozent, y = predictions, colour = Modeltype)) +
geom_line(aes(color = Modeltype)) + theme_bw()+
labs(x = "Messwerte", y = "Vorhersage") +
scale_shape_discrete(name = "Modelltyp", breaks = c("bestlinModel", "INB", "linModel", "OOB", "treeModel"), labels=c("Bestes lineares Modell", "RF-INB", "Einfaches lineares Modell", "RF-OOB", "CART"))+
scale_color_discrete(name = "Modelltyp", breaks = c("bestlinModel", "INB", "linModel", "OOB", "treeModel"), labels=c("Bestes lineares Modell", "RF-INB", "Einfaches lineares Modell", "RF-OOB", "CART"))
data |>
# Dataframe umgestalten. Spalte mit modelltyp hinzufügen.
pivot_longer(cols=c("linModel", "bestlinModel", "treeModel", "OOB", "INB"),
names_to='Modeltype', values_to='predictions') |>
# Entfernen von Zeilen mit NAs in der Error-Spalte
drop_na(predictions) |>
# ggplot
ggplot(aes(x = Bodenfeuchte_Prozent, y = predictions, colour = Modeltype)) +
geom_line(aes(color = Modeltype)) + theme_bw()+
labs(x = "Messwerte", y = "Vorhersage") +
scale_color_discrete(name = "Modelltyp", breaks = c("bestlinModel", "INB", "linModel", "OOB", "treeModel"), labels=c("Bestes lineares Modell", "RF-INB", "Einfaches lineares Modell", "RF-OOB", "CART"))
data |>
# Dataframe umgestalten. Spalte mit modelltyp hinzufügen.
pivot_longer(cols=c("linModel", "bestlinModel", "treeModel", "OOB", "INB"),
names_to='Modeltype', values_to='predictions') |>
# Entfernen von Zeilen mit NAs in der Error-Spalte
drop_na(predictions) |>
# ggplot
ggplot(aes(x = Bodenfeuchte_Prozent, y = predictions, colour = Modeltype)) +
geom_line(aes(color = Modeltype)) + theme_bw()+
labs(x = "Messwerte", y = "Vorhersage") +
scale_color_discrete(name = "Modelltyp", breaks = c("bestlinModel", "INB", "linModel", "OOB", "treeModel"), labels=c("Bestes lineares Modell", "RF-INB", "Einfaches lineares Modell", "RF-OOB", "CART"))
data |>
# Dataframe umgestalten. Spalte mit modelltyp hinzufügen.
pivot_longer(cols=c("linModel", "bestlinModel", "treeModel", "OOB", "INB"),
names_to='Modeltype', values_to='predictions') |>
# Entfernen von Zeilen mit NAs in der Error-Spalte
drop_na(predictions) |>
# ggplot
ggplot(aes(x = Bodenfeuchte_Prozent, y = predictions, colour = Modeltype)) +
geom_line(aes(color = Modeltype)) + theme_bw()+
labs(x = "Messwerte", y = "Vorhersage") +
scale_color_discrete(name = "Modelltyp", breaks = c("bestlinModel", "INB", "linModel", "OOB", "treeModel"), labels=c("Bestes lineares Modell", "RF-INB", "Einfaches lineares Modell", "RF-OOB", "CART"))+
geom_abline(slope = 1) + annotate("text", x = 52, y = 45, label = "y = 1x")
data |>
# Dataframe umgestalten. Spalte mit modelltyp hinzufügen.
pivot_longer(cols=c("linModel", "bestlinModel", "treeModel", "OOB", "INB"),
names_to='Modeltype', values_to='predictions') |>
# Entfernen von Zeilen mit NAs in der Error-Spalte
drop_na(predictions) |>
# ggplot
ggplot(aes(x = Bodenfeuchte_Prozent, y = predictions, colour = Modeltype)) +
geom_line(aes(color = Modeltype)) + theme_bw()+
labs(x = "Messwerte", y = "Vorhersage") +
scale_color_discrete(name = "Modelltyp", breaks = c("bestlinModel", "INB", "linModel", "OOB", "treeModel"), labels=c("Bestes lineares Modell", "RF-INB", "Einfaches lineares Modell", "RF-OOB", "CART"))+
geom_abline(slope = 1) + annotate("text", x = 10, y = 5, label = "y = 1x")
data |>
# Dataframe umgestalten. Spalte mit modelltyp hinzufügen.
pivot_longer(cols=c("linModel", "bestlinModel", "treeModel", "OOB", "INB"),
names_to='Modeltype', values_to='predictions') |>
# Entfernen von Zeilen mit NAs in der Error-Spalte
drop_na(predictions) |>
# ggplot
ggplot(aes(x = Bodenfeuchte_Prozent, y = predictions, colour = Modeltype)) +
geom_line(aes(color = Modeltype)) + theme_bw()+
labs(x = "Messwerte", y = "Vorhersage") +
scale_color_discrete(name = "Modelltyp", breaks = c("bestlinModel", "INB", "linModel", "OOB", "treeModel"), labels=c("Bestes lineares Modell", "RF-INB", "Einfaches lineares Modell", "RF-OOB", "CART"))+
geom_abline(slope = 1) + annotate("text", x = 15, y = 5, label = "y = 1x")
data |>
# Dataframe umgestalten. Spalte mit modelltyp hinzufügen.
pivot_longer(cols=c("linModel", "bestlinModel", "treeModel", "OOB", "INB"),
names_to='Modeltype', values_to='predictions') |>
# Entfernen von Zeilen mit NAs in der Error-Spalte
drop_na(predictions) |>
# ggplot
ggplot(aes(x = Bodenfeuchte_Prozent, y = predictions, colour = Modeltype)) +
geom_line(aes(color = Modeltype)) + theme_bw()+
labs(x = "Messwerte", y = "Vorhersage") +
scale_color_discrete(name = "Modelltyp", breaks = c("bestlinModel", "INB", "linModel", "OOB", "treeModel"), labels=c("Bestes lineares Modell", "RF-INB", "Einfaches lineares Modell", "RF-OOB", "CART"))+
geom_abline(slope = 1) + annotate("text", x = 13, y = 5, label = "y = 1x")
data |>
# Dataframe umgestalten. Spalte mit modelltyp hinzufügen.
pivot_longer(cols=c("linModel", "bestlinModel", "treeModel", "OOB", "INB"),
names_to='Modeltype', values_to='predictions') |>
# Entfernen von Zeilen mit NAs in der Error-Spalte
drop_na(predictions) |>
# ggplot
ggplot(aes(x = Bodenfeuchte_Prozent, y = predictions, colour = Modeltype)) +
geom_line(aes(color = Modeltype)) + theme_bw()+
labs(x = "Messwerte", y = "Vorhersage") +
scale_color_discrete(name = "Modelltyp", breaks = c("bestlinModel", "INB", "linModel", "OOB", "treeModel"), labels=c("Bestes lineares Modell", "RF-INB", "Einfaches lineares Modell", "RF-OOB", "CART"))+
geom_abline(slope = 1) + annotate("text", x = 13, y = 6, label = "y = 1x")
data |>
# Dataframe umgestalten. Spalte mit modelltyp hinzufügen.
pivot_longer(cols=c("linModel", "bestlinModel", "treeModel", "OOB", "INB"),
names_to='Modeltype', values_to='predictions') |>
# Entfernen von Zeilen mit NAs in der Error-Spalte
drop_na(predictions) |>
# ggplot
ggplot(aes(x = Bodenfeuchte_Prozent, y = predictions, colour = Modeltype)) +
geom_line(aes(color = Modeltype)) + theme_bw()+
labs(x = "Messwerte", y = "Vorhersage") +
scale_color_discrete(name = "Modelltyp", breaks = c("bestlinModel", "INB", "linModel", "OOB", "treeModel"), labels=c("Bestes lineares Modell", "RF-INB", "Einfaches lineares Modell", "RF-OOB", "CART"))+
geom_abline(slope = 1) + annotate("text", x = 13, y = 7, label = "y = 1x")
rm(y)
```{r, warning=FALSE, message=FALSE}
```{r, warning=FALSE, message=FALSE}
# Das Tidyverse
library(tidyverse)
# Plots
library(GGally)
library(corrplot)
# Statistik
library(Metrics)
# Geo-Pakete
library(sf)
library(tmap)
# Lineare Modelle
library(glmulti)
library(car) # vif
library(visreg)
# Baumbasierte Modelle
#install.packages("tree")
#install.packages("quantregForest")
library(tree)
library(randomForest)
library(quantregForest)
AIC(linModel)
cooks.distance(linModel)
plot(cooks.distance(linModel))
barplot(cooks.distance(linModel))
barplot(cooks.distance(linModel), cex.names = 0.5)
barplot(cooks.distance(linModel), cex.names = 0.5, horiz = T)
barplot(cooks.distance(linModel), cex.names = 0.5, horiz = T, las = 1)
barplot(cooks.distance(linModel), cex.names = 0.3, horiz = T, las = 1)
barplot(cooks.distance(linModel), cex.names = 0.7, horiz = T, las = 1)
barplot(cooks.distance(linModel), cex.names = 0.7)
barplot(cooks.distance(linModel), cex.names = 0.7, ylim = c(0, 0.4))
barplot(cooks.distance(linModel), cex.names = 0.7, ylim = c(0, 0.4), xlim = c(140,210))
barplot(cooks.distance(linModel), cex.names = 0.7, ylim = c(0, 0.4), xlim = c(140,207))
barplot(cooks.distance(linModel), cex.names = 0.7, ylim = c(0, 0.4))
# Wichtigkeit von Prädiktoren
plot(res, type = "s")
# AICs
plot(res)
mean(res@crits)
AIC(linModel)
mean(res@crits)
# AICs
plot(res)
# Wichtigkeit von Prädiktoren
plot(res, type = "s")
res1 = glmulti(linModel, level = 1, method = "h", confsetsize = 1, crit = "AIC")
library(tidyverse)
# Plots
library(GGally)
library(corrplot)
# Statistik
library(Metrics)
# Geo-Pakete
library(sf)
library(tmap)
# Lineare Modelle
library(glmulti)
library(car) # vif
library(visreg)
# Baumbasierte Modelle
#install.packages("tree")
#install.packages("quantregForest")
library(tree)
library(randomForest)
library(quantregForest)
res1 = glmulti(linModel, level = 1, method = "h", confsetsize = 1, crit = "AIC")
# AICs
plot(res)
mean(res@crits)
plot(res1)
res1@crits
# Das beste Modell
bestlinModel = res@objects[[1]]
summary(bestlinModel)
plot(bestlinModel)
bestlinModel@crits
visreg(bestlinModel)
visreg(res1)
visreg(res1)
visreg(res)
visreg(res1)
visreg(res1)
visreg(bestlinModel)
res1@crits
summary(bestlinModel)
# Das beste Modell
bestlinModel = res@objects[[1]]
plot(bestlinModel)
View(bestlinModel)
View(linModel)
View(bestlinModel)
bestlinModelneu <- lm(Bodenfeuchte_Prozent ~ Gelaendehoehe + Tiefe_zum_Oxidationshorizont_cm , data = modeldata)
bestlinModelneu <- lm(Bodenfeuchte_Prozent ~ Gelaendehoehe_m + Tiefe_zum_Oxidationshorizont_cm , data = modeldata)
visreg(bestlinModel)
rm(bestlinModelneu)
visreg(linModel)
visreg(bestlinModel)
summary(bestlinModel)
plot(bestlinModel)
visreg(bestlinModel)
View(bestlinModel)
visreg(drop_na(bestlinModel))
visreg(na_omit(bestlinModel))
visreg(na.omit(bestlinModel))
View(bestlinModel)
length(bestlinModel@res)
length(bestlinModel@residuals)
length(bestlinModel$residuals)
visreg(bestlinModel)
length(bestlinModel$fitted.values)
length(bestlinModel$residuals
# Vorhersage und Fehler speichern
data = pred(name = "bestlinModel", model = bestlinModel,
length(bestlinModel$fitted.values)
visreg(bestlinModel)
summary(bestlinModel)
length(bestlinModel$residuals)
length(bestlinModel$fitted.values)
visreg(bestlinModel, scale = "response")
try <- predict(bestlinModel)
visreg(try)
rm(try)
visreg(bestlinModel)
visreg(bestlinModel)
# Das beste Modell
bestlinModel = res@objects[[1]]
summary(bestlinModel)
plot(bestlinModel)
res1@crits
visreg(bestlinModel)
# Das beste Modell
bestlinModel = res@objects[[1]]
summary(bestlinModel)
plot(bestlinModel)
visreg(bestlinModel)
linModel = lm(Bodenfeuchte_Prozent ~ Gelaendehoehe_m, Tiefe_zum_Oxidationshorizont_cm, data = modeldata)
linModelattempt= lm(Bodenfeuchte_Prozent ~ Gelaendehoehe_m, Tiefe_zum_Oxidationshorizont_cm, data = modeldata)
linModel = lm(Bodenfeuchte_Prozent ~ ., data = modeldata)
# Vorhersage und Fehler speichern
data = pred(name = "linModel", model = linModel, predictors = predictors,
data = data, response = response)
# RMSE
rmse(actual = data[!is.na(data$linModel), response],
predicted = data[!is.na(data$linModel), "linModel"])
# VIF
vif(linModel)
#barplot(vif(linModel), main="VIF", names.arg= "", horiz = T, las= 1, cex.names = 0.7)
#text(1.85, 5.5, "Geländehöhe (1,90)", pos = 4)
#text(1.45, 3,"Mächtigkeit_A_Horizont (1,50)", pos = 4)
#text(3,2, "Mächtigkeit_Ox.Horizont (3,00)", pos = 4)
#text("Mächtigkeit_AL_Horizont (1,72)")
#text("Tiefe zum Ox.Horizont (2,68")
out <- barplot(vif(linModel), main="", names.arg="")
text(out, rep(-.1, 6), c("Tiefe zum Ox.horizont", "Mächtigkeit Ox.horizont", "Mächtigkeit_A", "Mächtigkeit_AL", "Geländehöhe"), srt=45, pos=2, xpd=NA, cex=.75)
text(x = out, y= vif(linModel),
label = paste(round(vif(linModel),3)),
pos = 1, cex = 0.8, col = "red")
barplot(cooks.distance(linModel), cex.names = 0.7, ylim = c(0, 0.4))
AIC(linModel)
visreg(linModel)
View(linModelattempt)
summary(linModelattempt)
summary(bestlinModel)
summary(linModelattempt)
linModelattempt= lm(Bodenfeuchte_Prozent ~ Gelaendehoehe_m + Tiefe_zum_Oxidationshorizont_cm, data = modeldata)
summary(linModelattempt)
summary(bestlinModel)
summary(linModelattempt)
summary(bestlinModel)
summary(linModelattempt)
visreg(linModelattempt)
visreg(linModelattempt)
bestlinModel$crits
res1@crits #AIC
# Plots
install.packages(patchwork)
# Plots
install.packages("patchwork")
library(patchwork)
p <- visreg(linModel)
p
p1 <- visreg(linModel)[1]
p1 <- visreg(linModel, 1)
p1 <- visreg(linModel)
View(p1)
p1 <- visreg(linModel)[[1]]
p2 <- visreg(linModel)[[2]]
p1 <- visreg(linModel)[[1]]
p2 <- visreg(linModel)[[2]]
View(p1)
View(p)
p1 <- visreg(linModel, xvar = "Gelaendehoehe_m")
p2 <- visreg(linModel, xvar = "Tiefe_zum_Oxidationshorizont_cm")
p3 <- visreg(linModel, xvar = "Maechtigkeit_Oxidationshorizont_cm")
p4 <- visreg(linModel, xvar = "Maechtigkeit_A_Horizont_cm")
p5 <- visreg(linModel, xvar = "Maechtigkeit_AL_Horizont_cm")
View(predictors)
p5 <- visreg(linModel, xvar = "Maechtigkeit_AL_Schicht_cm")
p1+p2+p3+p4+p5
par(mfrow = c(1,5))
p1+p2+p3+p4+p5
p1
p2
plot(p1)
plot(p2)
par(mfrow = c(1,5))
plot(p1)
plot(p2)
library(graphics)
par(mfrow = c(1,5))
plot(p1)
plot(p2)
par(mfrow = c(3,3))
p1 <- visreg(linModel, xvar = "Gelaendehoehe_m")
p2 <- visreg(linModel, xvar = "Tiefe_zum_Oxidationshorizont_cm")
print(p1)
p1
plot.visreg(visreg(linModel))
plot(p1)
p1 <- visreg(linModel, xvar = "Gelaendehoehe_m", gg= T)
plot(p1)
p2 <- visreg(linModel, xvar = "Tiefe_zum_Oxidationshorizont_cm". gg = T)
p2 <- visreg(linModel, xvar = "Tiefe_zum_Oxidationshorizont_cm", gg = T)
p1+p2
p4 <- visreg(linModel, xvar = "Maechtigkeit_A_Horizont_cm", gg = T)
p5 <- visreg(linModel, xvar = "Maechtigkeit_AL_Schicht_cm", gg = T)
p1+p2+p3+p4+p5
p1+p2+p3
p1+p2
p1+p2\p3+p4
p1+p2/p3+p4
p1 <- visreg(linModel, xvar = "Gelaendehoehe_m", gg= T)
p2 <- visreg(linModel, xvar = "Tiefe_zum_Oxidationshorizont_cm", gg = T)
p3 <- visreg(linModel, xvar = "Maechtigkeit_Oxidationshorizont_cm",gg = T)
p4 <- visreg(linModel, xvar = "Maechtigkeit_A_Horizont_cm", gg = T)
p5 <- visreg(linModel, xvar = "Maechtigkeit_AL_Schicht_cm", gg = T)
p1+p2/p3+p4
p1+p2/(p3+p4)/p5
(p1+p2)/(p3+p4)/p5
(p1+p2)/(p3+p4)/p5+ plot_layout(nrow = 3, byrow = FALSE)
p1 <- visreg(linModel, xvar = "Gelaendehoehe_m", gg= T, ylab= "")
p2 <- visreg(linModel, xvar = "Tiefe_zum_Oxidationshorizont_cm", gg = T, ylab = "")
p3 <- visreg(linModel, xvar = "Maechtigkeit_Oxidationshorizont_cm",gg = T, ylab= "")
p4 <- visreg(linModel, xvar = "Maechtigkeit_A_Horizont_cm", gg = T, ylab = "")
p5 <- visreg(linModel, xvar = "Maechtigkeit_AL_Schicht_cm", gg = T)
(p1+p2)/(p3+p4)/p5+ plot_layout(nrow = 3, byrow = FALSE)
(p1+p2)/(p3+p4)/(p5+ grid::textGrob('Some really important text'))
(p1+p2)/(p3+p4)/(p5+ grid::textGrob(""))
(p1+p2)/(p3+p4)/(p5+ plot_spacer())
(p1+p2)/(p3+p4)/(p5+ plot_spacer()) + labs(y = "Bodenfeuchte[%]")
p1 <- visreg(linModel, xvar = "Gelaendehoehe_m", gg= T, ylab= "")
p2 <- visreg(linModel, xvar = "Tiefe_zum_Oxidationshorizont_cm", gg = T, ylab = "")
p3 <- visreg(linModel, xvar = "Maechtigkeit_Oxidationshorizont_cm",gg = T, ylab= "")
p4 <- visreg(linModel, xvar = "Maechtigkeit_A_Horizont_cm", gg = T, ylab = "")
p5 <- visreg(linModel, xvar = "Maechtigkeit_AL_Schicht_cm", gg = T, ylab="")
(p1+p2)/(p3+p4)/(p5+ plot_spacer()) + labs(y = "Bodenfeuchte[%]")
(p1+p2)/(p3+p4)/(p5+ plot_spacer()) + labs(y = "Bodenfeuchte[%]", caption = "Bodenfeuchte[%]")
(p1+p2)/(p3+p4)/(p5+ plot_spacer()) + grid::grid.draw(grid::textGrob(ylab = "Bodenfeuchte[%]"))
(p1+p2)/(p3+p4)/(p5+ plot_spacer()) + grid::grid.draw(grid::textGrob(ylab, x = 0.02, rot = 90))
(p1+p2)/(p3+p4)/(p5+ plot_spacer()) + grid::grid.draw(grid::textGrob(ylab, rot = 90))
p1 <- visreg(linModel, xvar = "Gelaendehoehe_m", gg= T, ylab= "Bodenfeuchte[%]")
p2 <- visreg(linModel, xvar = "Tiefe_zum_Oxidationshorizont_cm", gg = T, ylab = "")
p3 <- visreg(linModel, xvar = "Maechtigkeit_Oxidationshorizont_cm",gg = T, ylab= "Bodenfeuchte[%]")
p4 <- visreg(linModel, xvar = "Maechtigkeit_A_Horizont_cm", gg = T, ylab = "")
p5 <- visreg(linModel, xvar = "Maechtigkeit_AL_Schicht_cm", gg = T, ylab="Bodenfeuchte[%]")
rm(ylab)
(p1+p2)/(p3+p4)/(p5+ plot_spacer())
p1 <- visreg(linModel, xvar = "Gelaendehoehe_m", gg= T, ylab= "Bodenfeuchte[%]", cex.axis = 0.7)
(p1+p2)/(p3+p4)/(p5+ plot_spacer())
p1 <- visreg(linModel, xvar = "Gelaendehoehe_m", gg= T, ylab= "Bodenfeuchte[%]", cex.labels = 0.7)
(p1+p2)/(p3+p4)/(p5+ plot_spacer())
p1 <- visreg(linModel, xvar = "Gelaendehoehe_m", gg= T, ylab= "Bodenfeuchte[%]", cex.lab = 0.7)
(p1+p2)/(p3+p4)/(p5+ plot_spacer())
p1 <- visreg(linModel, xvar = "Gelaendehoehe_m", gg= T, ylab= "Bodenfeuchte[%]", cex.lab = 0.6)
(p1+p2)/(p3+p4)/(p5+ plot_spacer())
(p1+p2)/(p3+p4)/(p5+ plot_spacer())+theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
My_Theme = theme(
axis.title.x = element_text(size = 10),
axis.text.x = element_text(size = 10),
axis.title.y = element_text(size = 10))
(p1+p2)/(p3+p4)/(p5+ plot_spacer())+ MyTheme
My_Theme = theme(
axis.title.x = element_text(size = 10),
axis.text.x = element_text(size = 10),
axis.title.y = element_text(size = 10))
(p1+p2)/(p3+p4)/(p5+ plot_spacer())+ MyTheme
(p1+p2)/(p3+p4)/(p5+ plot_spacer())+ My_Theme
My_Theme = theme(
axis.title.x = element_text(size = 10),
axis.text.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
axis.text.y = element_text(size=8))
(p1+p2)/(p3+p4)/(p5+ plot_spacer())+ My_Theme
p1 <- visreg(linModel, xvar = "Gelaendehoehe_m", gg= T, ylab= "")
p2 <- visreg(linModel, xvar = "Tiefe_zum_Oxidationshorizont_cm", gg = T, ylab = "")
p3 <- visreg(linModel, xvar = "Maechtigkeit_Oxidationshorizont_cm",gg = T, ylab= "Bodenfeuchte[%]")
p4 <- visreg(linModel, xvar = "Maechtigkeit_A_Horizont_cm", gg = T, ylab = "")
p5 <- visreg(linModel, xvar = "Maechtigkeit_AL_Schicht_cm", gg = T, ylab="")
(p1+p2)/(p3+p4)/(p5+ plot_spacer())+ My_Theme
(p1+p2)/(p3+p4)/(p5+ plot_spacer())
# RMSE
rmse(actual = data[!is.na(data$linModel), response],
predicted = data[!is.na(data$linModel), "linModel"])
View(data)
results = aov( errlinModel ~ StratumName, data=data)
summary(results)
bartlett.test(data$errlinModel~ data$StratumName)
summary(results)
