# Das Tidyverse
library(tidyverse)
# Plots
library(GGally)
library(corrplot)
# Statistik
library(Metrics)
# Geo-Pakete
library(sf)
library(tmap)
# Lineare Modelle
library(glmulti)
# Lineare Modelle
install.packages(glmulti)
# Das Tidyverse
library(tidyverse)
# Plots
library(GGally)
library(corrplot)
# Statistik
library(Metrics)
# Geo-Pakete
library(sf)
library(tmap)
# Lineare Modelle
install.packages(glmulti)
# Lineare Modelle
install.packages("glmulti")
library(glmulti)
# Lineare Modelle
#install.packages("glmulti")
library(glmulti)
# Lineare Modelle
#install.packages("glmulti")
install.packages("rJava")
# Lineare Modelle
#install.packages("glmulti")
install.packages("rJava")
library(glmulti)
library(rJava)
library(rJava)
library(glmulti)
# Lineare Modelle
library(glmulti)
library(car) # vif
library(visreg)
# Baumbasierte Modelle
library(tree)
# Baumbasierte Modelle
install.packages("tree")
library(tree)
library(randomForest)
install.packages("randomForest", "quantregForest")
install.packages("randomForest", "quantregForest")
library(tree)
library(randomForest)
library(quantregForest)
# Baumbasierte Modelle
#install.packages("tree")
install.packages("quantregForest")
library(tree)
# Baumbasierte Modelle
#install.packages("tree")
#install.packages("quantregForest")
library(tree)
library(randomForest)
library(quantregForest)
# Seed festlegen
set.seed(1)
# Kartenansicht auf interaktiv einstellen
tmap::tmap_mode("view")
# Funktion, um Modellvorhersage und Fehler an
# den zentralen Dataframe 'data' anzubinden
pred = function(name, model, predictors = NA, data, response,
predictions = NULL) {
# Vorhersagespalte anlegen
data[,name] = rep(NA, nrow(data))
# Fehlerspalte anlegen
data[,paste0("err", name)] = rep(NA, nrow(data))
if (!is.null(predictions)) {
data[as.double(names(predictions)),name] = predictions
} else {
# Vorhersagewerte bestimmen
predictions = predict(model, newdata = predictors)
# Vorhersage anbinden
data[rownames(predictors),name] = predictions
}
# Eigentliche Werte
actual = data[!is.na(data[,name]), response]
# Fehler anbinden
data[!is.na(data[,name]),paste0("err", name)] = (predictions - actual)**2
return(data)
}
# Funktion zur Berechnung von Gesamtvarianz (SST),
# nicht-erklärter Varianz (SSE) und R²
var = function(yobs, ymod) {
SST = sum((yobs - mean(yobs))^2)
SSE = sum((yobs - ymod)^2)
R2 = 1-SSE/SST
vec = setNames(c(SST, SSE, R2), c("SST", "SSE", "R2"))
return(vec)
}
# Funktion, um aus einem Dataframe ein
# simple feature zu erstellen
sf = function(df) {
st_as_sf(df, coords = c("x_UTM", "y_UTM"), crs = st_crs(25833))
}
# Inputdatei
path = "Data/data.txt"
# Response-Variable
response = "Bodenfeuchte_Prozent"
# Alles Einlesen
readin = read.table(path, header = TRUE)
# Variablen von Interesse auswählen
data = readin |>
select(Punkt, Jahr, Stratum, x_UTM, y_UTM,
Tiefe_zum_Oxidationshorizont_cm,
Maechtigkeit_Oxidationshorizont_cm,
Maechtigkeit_A_Horizont_cm,
Maechtigkeit_AL_Schicht_cm,
Gelaendehoehe_m,
Bodenfeuchte_Prozent)
# Modelldaten selektieren
modeldata =  data |>
select(Tiefe_zum_Oxidationshorizont_cm,
Maechtigkeit_Oxidationshorizont_cm,
Maechtigkeit_A_Horizont_cm,
Maechtigkeit_AL_Schicht_cm,
Gelaendehoehe_m,
Bodenfeuchte_Prozent) |>
na.omit()
# Prädiktoren selektieren
predictors = modeldata |>
select(-one_of(response))
View(readin)
View(data)
View(modeldata)
View(predictors)
# Kartenansicht der Daten
tm_shape(sf(data)) + tm_dots(col = response)
# Neue Spalte anlegen mit Namen der Straten
data = data %>%
mutate(StratumName = case_when(
Stratum == 1 ~ "Talsand",
Stratum == 2 ~ "Übergang",
Stratum == 3 ~ "Feuchtwiese"
))
View(data)
# Modellerstellung
linModel = lm(Bodenfeuchte_Prozent ~ ., data = modeldata)
View(linModel)
# Vorhersage und Fehler speichern
data = pred(name = "linModel", model = linModel, predictors = predictors,
data = data, response = response)
View(data)
is.null(0)
is.null(NA)
is.null(2)
is.null(0)
# Vorhersage und Fehler speichern
data = pred(name = "linModel", model = linModel, predictors = predictors,
data = data, response = response)
# RMSE
rmse(actual = data[!is.na(data$linModel), response],
predicted = data[!is.na(data$linModel), "linModel"])
# VIF
vif(linModel)
# Mögliche lineare Modelle nach Güte untersuchen und ordnen
res = glmulti(linModel, level = 1, method = "h", confsetsize = 8, crit = "AIC")
# AICs
plot(res)
mean(res@crits)
# Wichtigkeit von Prädiktoren
plot(res, type = "s")
# Das beste Modell
bestlinModel = res@objects[[1]]
summary(bestlinModel)
plot(bestlinModel)
visreg(bestModel) #?!
visreg(bestlinModel) #?!
plot(bestlinModel)
# Vorhersage und Fehler speichern
data = pred(name = "bestlinModel", model = bestlinModel,
predictors = predictors, data = data,
response = response)
var(yobs = data[!is.na(data$bestlinModel), response], ymod = na.omit(data$bestlinModel))
# RMSE
rmse(actual = data[!is.na(data$bestlinModel), response],
predicted = data[!is.na(data$bestlinModel), "bestlinModel"])
ggplot(data |> drop_na(linModel), aes(x = Bodenfeuchte_Prozent, y = linModel)) +
geom_point(aes(col = StratumName))
ggplot(data |> drop_na(errlinModel), aes(x = StratumName, y = errlinModel)) +
geom_boxplot(aes(fill = StratumName))
tm_shape(sf(data)) + tm_dots(col = "bestlinModel")
ggplot(data |> drop_na(linModel), aes(x = Bodenfeuchte_Prozent, y = linModel)) +
geom_point(aes(col = StratumName))
ggplot(data |> drop_na(linModel), aes(x = Bodenfeuchte_Prozent, y = linModel)) + geom_point(aes(col = StratumName)) + labs(title = "Abweichung von vorhergesagten und tatsächlichen Datenpunkten")
ggplot(data |> drop_na(linModel), aes(x = Bodenfeuchte_Prozent, y = linModel)) + geom_point(aes(col = StratumName)) + labs(title = "Einfaches lineares Modell", subtitle = "Abweichung von vorhergesagten und gemessenen Werten" ,x = "Bodenfeuchte [%] - gemessen", y = "Bodenfeuchte [%] - vorhergesagt")
ggplot(data |> drop_na(linModel), aes(x = Bodenfeuchte_Prozent, y = linModel)) + geom_point(aes(col = StratumName)) + labs(title = "Abweichung von vorhergesagten und gemessenen Werten", subtitle = "Einfaches lineares Modell" ,x = "Bodenfeuchte [%] - gemessen", y = "Bodenfeuchte [%] - vorhergesagt")
ggplot(data |> drop_na(linModel), aes(x = Bodenfeuchte_Prozent, y = linModel)) + geom_point(aes(col = StratumName)) + labs(title = "Abweichung von vorhergesagten und gemessenen Werten", subtitle = "Einfaches lineares Modell" ,x = "Messwerte", y = "Vorhersage", caption = "Bodenfeuchte [%]")
ggplot(data |> drop_na(linModel), aes(x = Bodenfeuchte_Prozent, y = linModel)) + geom_point(aes(col = StratumName)) + labs(title = "Abweichung von vorhergesagten und gemessenen Werten", subtitle = "Einfaches lineares Modell" ,x = "Messwerte", y = "Vorhersage", caption = "Bodenfeuchte [%]", colour = "Standort")
ggplot(data |> drop_na(linModel), aes(x = Bodenfeuchte_Prozent, y = linModel)) + geom_point(aes(col = StratumName)) + labs(title = "Abweichung von vorhergesagten und gemessenen Werten", subtitle = "Einfaches lineares Modell" ,x = "Messwerte", y = "Vorhersage", caption = "Bodenfeuchte [%]", colour = "Stratum")
+geom_abline(slope = 1)
+ labs(title = "Abweichung von vorhergesagten und gemessenen Werten", subtitle = "Einfaches lineares Modell" ,x = "Messwerte", y = "Vorhersage", caption = "Bodenfeuchte [%]", colour = "Stratum")+geom_abline(slope = 1)
ggplot(data |> drop_na(linModel), aes(x = Bodenfeuchte_Prozent, y = linModel)) + geom_point(aes(col = StratumName)) + labs(title = "Abweichung von vorhergesagten und gemessenen Werten", subtitle = "Einfaches lineares Modell" ,x = "Messwerte", y = "Vorhersage", caption = "Bodenfeuchte [%]", colour = "Stratum")+geom_abline(slope = 1)
+geom_abline(slope = 1)
ggplot(data |> drop_na(linModel), aes(x = Bodenfeuchte_Prozent, y = linModel)) + geom_point(aes(col = StratumName))                                           + labs(title = "Abweichung von vorhergesagten und gemessenen Werten", subtitle = "Einfaches lineares Modell" ,x = "Messwerte", y = "Vorhersage", caption = "Bodenfeuchte [%]", colour = "Stratum")                              +geom_abline(slope = 1)
annotate("text", x = 50, y = 45, "y = 1")
ggplot(data |> drop_na(linModel), aes(x = Bodenfeuchte_Prozent, y = linModel)) + geom_point(aes(col = StratumName))                                           + labs(title = "Abweichung von vorhergesagten und gemessenen Werten", subtitle = "Einfaches lineares Modell" ,x = "Messwerte", y = "Vorhersage", caption = "Bodenfeuchte [%]", colour = "Stratum")                              +geom_abline(slope = 1)
annotate("text", x = 50, y = 45, "y = 1")
ggplot(data |> drop_na(linModel), aes(x = Bodenfeuchte_Prozent, y = linModel)) + geom_point(aes(col = StratumName))                                           + labs(title = "Abweichung von vorhergesagten und gemessenen Werten", subtitle = "Einfaches lineares Modell" ,x = "Messwerte", y = "Vorhersage", caption = "Bodenfeuchte [%]", colour = "Stratum")                              +geom_abline(slope = 1) + annotate("text", x = 50, y = 45, "y = 1")
ggplot(data |> drop_na(linModel), aes(x = Bodenfeuchte_Prozent, y = linModel)) + geom_point(aes(col = StratumName))                                           + labs(title = "Abweichung von vorhergesagten und gemessenen Werten", subtitle = "Einfaches lineares Modell" ,x = "Messwerte", y = "Vorhersage", caption = "Bodenfeuchte [%]", colour = "Stratum")                              +geom_abline(slope = 1)
ggplot(data |> drop_na(linModel), aes(x = Bodenfeuchte_Prozent, y = linModel)) + geom_point(aes(col = StratumName))                                           + labs(title = "Abweichung von vorhergesagten und gemessenen Werten", subtitle = "Einfaches lineares Modell" ,x = "Messwerte", y = "Vorhersage", caption = "Bodenfeuchte [%]", colour = "Stratum")                              +geom_abline(slope = 1) + annotate("text", x = 50, y = 45, label = "y=1")
ggplot(data |> drop_na(linModel), aes(x = Bodenfeuchte_Prozent, y = linModel)) + geom_point(aes(col = StratumName))                                           + labs(title = "Abweichung von vorhergesagten und gemessenen Werten", subtitle = "Einfaches lineares Modell" ,x = "Messwerte", y = "Vorhersage", caption = "Bodenfeuchte [%]", colour = "Stratum")                              +geom_abline(slope = 1) + annotate("text", x = 50, y = 45, label = "y = 1")
ggplot(data |> drop_na(linModel), aes(x = Bodenfeuchte_Prozent, y = linModel)) + geom_point(aes(col = StratumName))                                           + labs(title = "Abweichung von vorhergesagten und gemessenen Werten", subtitle = "Einfaches lineares Modell" ,x = "Messwerte", y = "Vorhersage", caption = "Bodenfeuchte [%]", colour = "Stratum")                              +geom_abline(slope = 1) + annotate("text", x = 50, y = 45, label = "y = 1*x")
ggplot(data |> drop_na(linModel), aes(x = Bodenfeuchte_Prozent, y = linModel)) + geom_point(aes(col = StratumName))                                           + labs(title = "Abweichung von vorhergesagten und gemessenen Werten", subtitle = "Einfaches lineares Modell" ,x = "Messwerte", y = "Vorhersage", caption = "Bodenfeuchte [%]", colour = "Stratum")                              +geom_abline(slope = 1) + annotate("text", x = 50, y = 45, label = "y = 1x")
ggplot(data |> drop_na(linModel), aes(x = Bodenfeuchte_Prozent, y = linModel)) + geom_point(aes(col = StratumName))                                           + labs(title = "Abweichung von vorhergesagten und gemessenen Werten", subtitle = "Einfaches lineares Modell" ,x = "Messwerte", y = "Vorhersage", caption = "Bodenfeuchte [%]", colour = "Stratum")                              +geom_abline(slope = 1) + annotate("text", x = 52, y = 45, label = "y = 1x")
ggplot(data |> drop_na(errlinModel), aes(x = StratumName, y = errlinModel)) +
geom_boxplot(aes(fill = StratumName))
ggplot(data |> drop_na(linModel), aes(x = Bodenfeuchte_Prozent, y = linModel)) + geom_point(aes(col = StratumName))                                           + labs(title = "Abweichung von vorhergesagten und gemessenen Werten", subtitle = "Einfaches lineares Modell" ,x = "Messwerte", y = "Vorhersage", caption = "Bodenfeuchte [%]", colour = "Stratum")                              +geom_abline(slope = 1) + annotate("text", x = 52, y = 45, label = "y = 1x")
ggplot(data |> drop_na(errlinModel), aes(x = StratumName, y = errlinModel)) +
geom_boxplot(aes(fill = StratumName))
ggplot(data |> drop_na(errlinModel), aes(x = StratumName, y = errlinModel)) +
geom_boxplot(aes(fill = StratumName)) +
labs(x = "Stratum", y = "Fehlerquadratsumme (evtl fehlt Wurzel)")
ggplot(data |> drop_na(errlinModel), aes(x = StratumName, y = errlinModel)) +
geom_boxplot(aes(fill = StratumName)) +
labs(x = "Stratum", y = "Fehlerquadratsumme (evtl fehlt Wurzel)", colour = "Stratum")
ggplot(data |> drop_na(errlinModel), aes(x = StratumName, y = errlinModel)) +
geom_boxplot(aes(fill = StratumName)) +
labs(x = "Stratum", y = "Fehlerquadratsumme (evtl fehlt Wurzel)", fill = "Stratum")
ggplot(data |> drop_na(errlinModel), aes(x = StratumName, y = errlinModel)) +
geom_boxplot(aes(fill = StratumName)) +
labs(x = "", y = "Fehlerquadratsumme (evtl fehlt Wurzel)")+
theme(legend.position="none")
tm_shape(sf(data)) + tm_dots(col = "bestlinModel")
ggplot(data |> drop_na(bestlinModel), aes(x = Bodenfeuchte_Prozent, y = bestlinModel))+
geom_point(aes(col = StratumName))+
labs(title = "Abweichung von vorhergesagten und gemessenen Werten", subtitle = "Bestes lineares Modell" ,x = "Messwerte", y = "Vorhersage", caption = "Bodenfeuchte [%]", colour = "Stratum")+
geom_abline(slope = 1) + annotate("text", x = 52, y = 45, label = "y = 1x")
ggplot(data |> drop_na(errbestlinModel), aes(x = StratumName, y = errbestlinModel)) +
geom_boxplot(aes(fill = StratumName)) +
labs(x = "", y = "Fehlerquadratsumme (evtl fehlt Wurzel)")+
theme(legend.position="none")
